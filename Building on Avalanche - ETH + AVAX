// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract RalphGamingToken is IERC20, Ownable {
    using SafeMath for uint256;

    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 private _totalSupply;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    // Redeemable BundleDiamonds
    struct BundleDiamond {
        string name;
        uint256 price;
        bool available;
    }

    BundleDiamond[] public bundleDiamonds;
    mapping(address => mapping(uint256 => bool)) public redeemedBundleDiamond;

    event BundleDiamondRedeemed(address indexed player, uint256 indexed bundleDiamondId, string bundleDiamondName);
    event BundleDiamondBought(address indexed player, uint256 indexed bundleDiamondId, string bundleDiamondName);
    event BundleDiamondUnitRedeemed(address indexed player, uint256 indexed bundleDiamondUnitId);

    constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals,
        uint256 initialSupply,
        address initialOwner
    ) Ownable(initialOwner) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        _totalSupply = initialSupply * 10**uint256(_decimals);
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);

        // Initialize predefined BundleDiamonds
        bundleDiamonds.push(BundleDiamond({ name: "Sword of Valor", price: 9000, available: true }));
        bundleDiamonds.push(BundleDiamond({ name: "Shield of Courage", price: 6000, available: true }));
        bundleDiamonds.push(BundleDiamond({ name: "Potion of Strength", price: 4000, available: true }));
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            msg.sender,
            _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance")
        );
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function mint(address account, uint256 amount) public onlyOwner {
        _mint(account, amount);
    }

    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    // Burn function
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    // Redeem a BundleDiamond
    function redeemBundleDiamond(uint256 bundleDiamondId) public {
        require(bundleDiamondId < bundleDiamonds.length, "BundleDiamond does not exist");
        BundleDiamond storage bundleDiamond = bundleDiamonds[bundleDiamondId];
        require(bundleDiamond.available, "BundleDiamond is not available");
        require(!redeemedBundleDiamond[msg.sender][bundleDiamondId], "BundleDiamond already redeemed");

        uint256 price = bundleDiamond.price;

        // Increase the total supply and add tokens to the player's balance
        _mint(msg.sender, price);

        // Mark the BundleDiamond as redeemed
        redeemedBundleDiamond[msg.sender][bundleDiamondId] = true;

        emit BundleDiamondRedeemed(msg.sender, bundleDiamondId, bundleDiamond.name);
    }

    // Buy a BundleDiamond
    function buyBundleDiamond(uint256 bundleDiamondId) public {
        require(bundleDiamondId < bundleDiamonds.length, "BundleDiamond does not exist");
        BundleDiamond storage bundleDiamond = bundleDiamonds[bundleDiamondId];
        require(bundleDiamond.available, "BundleDiamond is not available");
        require(_balances[msg.sender] >= bundleDiamond.price, "Insufficient balance to buy BundleDiamond");

        // Transfer the tokens and mark the BundleDiamond as unavailable
        _balances[msg.sender] = _balances[msg.sender].sub(bundleDiamond.price, "ERC20: buy amount exceeds balance");
        _totalSupply = _totalSupply.sub(bundleDiamond.price);
        bundleDiamond.available = false;

        emit BundleDiamondBought(msg.sender, bundleDiamondId, bundleDiamond.name);
    }

    // Check if a BundleDiamond is available
    function isBundleDiamondAvailable(uint256 bundleDiamondId) public view returns (bool) {
        if (bundleDiamondId < bundleDiamonds.length) {
            return bundleDiamonds[bundleDiamondId].available;
        }
        return false;
    }
}
