// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MyToken is IERC20, Ownable {
    using SafeMath for uint256;

    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 private _totalSupply;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    // Redeemable items
    struct Item {
        string name;
        uint256 price;
        bool available;
    }

    Item[] public items;
    mapping(address => mapping(uint256 => bool)) public redeemedItems;

    event ItemRedeemed(address indexed player, uint256 indexed itemId, string itemName);
    event ItemBought(address indexed player, uint256 indexed itemId, string itemName);

    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 initialSupply, address initialOwner) Ownable(initialOwner) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        _totalSupply = initialSupply * 10 ** uint256(_decimals);
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);

        // Initialize predefined items
        items.push(Item({ name: "Kyrie 1 Anta", price: 9000, available: true }));
        items.push(Item({ name: "Kobe 2", price: 6000, available: true }));
        items.push(Item({ name: "Jordan 1", price: 4000, available: true }));
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function mint(address account, uint256 amount) public onlyOwner {
        _mint(account, amount);
    }

    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    // Burn function
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    // Redeem an item
    function redeemItem(uint256 itemId) public {
        require(itemId < items.length, "Item does not exist");
        Item storage item = items[itemId];
        require(item.available, "Item is not available");
        require(!redeemedItems[msg.sender][itemId], "Item already redeemed");

        uint256 price = item.price;
        require(_balances[msg.sender] >= price, "Insufficient balance to redeem item");

        // Increase the total supply and transfer tokens to the player
        _mint(msg.sender, price);

        // Mark the item as redeemed
        redeemedItems[msg.sender][itemId] = true;

        emit ItemRedeemed(msg.sender, itemId, item.name);
    }

    // Buy an item
    function buyItem(uint256 itemId) public {
        require(itemId < items.length, "Item does not exist");
        Item storage item = items[itemId];
        require(item.available, "Item is not available");
        require(_balances[msg.sender] >= item.price, "Insufficient balance to buy item");

        // Transfer the tokens and mark the item as unavailable
        _balances[msg.sender] = _balances[msg.sender].sub(item.price, "ERC20: buy amount exceeds balance");
        _totalSupply = _totalSupply.sub(item.price);
        item.available = false;

        emit ItemBought(msg.sender, itemId, item.name);
    }

    // Check if an item is available
    function isItemAvailable(uint256 itemId) public view returns (bool) {
        if (itemId < items.length) {
            return items[itemId].available;
        }
        return false;
    }
}
